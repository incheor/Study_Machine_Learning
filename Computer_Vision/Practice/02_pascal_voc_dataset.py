# -*- coding: utf-8 -*-
"""02.pascal_voc_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wl6LkG1amuo2O4brsBEuoRSctMyhisV9

# PASCAL VOC 2012 데이터 다운로드 받기
"""

# 디렉토리 만들기
!mkdir ./data
# pascal voc 2012 데이터 다운로드하기
!wget http://host.robots.ox.ac.uk/pascal/VOC/voc2012/VOCtrainval_11-May-2012.tar
# 다운로드하고 /content/data 디렉토리에 압축 해제
!tar -xvf VOCtrainval_11-May-2012.tar -C /content/data

!ls /content/data/VOCdevkit/VOC2012
!ls /content/data/VOCdevkit/VOC2012/JPEGImages | head -n 5

"""# JPEGImages 디렉토리에 있는 임의의 이미지 보기"""

# Commented out IPython magic to ensure Python compatibility.
import cv2
import matplotlib.pyplot as plt
import os
# %matplotlib inline

# default_dir는 /content/data로 지정
# os.path.join()으로 상세 파일/디렉토리를 지정
default_dir = '/content/data'
img = cv2.imread(os.path.join(default_dir, 'VOCdevkit/VOC2012/JPEGImages/2007_000032.jpg'))
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
print('img shape:', img.shape)

plt.figure(figsize=(8, 8))
plt.imshow(img_rgb)
plt.show()

"""# Annotations 디렉토리에 있는 임의의 annotation 파일 보기"""

!cat /content/data/VOCdevkit/VOC2012/Annotations/2007_000032.xml

"""# SegmentationObject 디렉토리에 있는 있는 임의의 maksing 이미지 보기"""

img = cv2.imread(os.path.join(default_dir, 'VOCdevkit/VOC2012/SegmentationObject/2007_000032.png'))
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
print('img shape:', img.shape)

plt.figure(figsize=(8, 8))
plt.imshow(img_rgb)
plt.show()

"""# Annotation xml 파일에 있는 요소들을 파싱하여 접근하기"""

import os
import random

# 코랩 버전 절대경로 수정
VOC_ROOT_DIR = "/content/data/VOCdevkit/VOC2012/"
ANNO_DIR = os.path.join(VOC_ROOT_DIR, "Annotations")
IMAGE_DIR = os.path.join(VOC_ROOT_DIR, "JPEGImages")

xml_files = os.listdir(ANNO_DIR)                       
print(xml_files[:5])
print(len(xml_files))

import os
import xml.etree.ElementTree as ET

# xml 파일 경로 설정
xml_file = os.path.join(ANNO_DIR, '2007_000032.xml')

# xml 파일을 Parsing 하여 Element 생성(루트 노드 가져옴)
tree = ET.parse(xml_file)
root = tree.getroot()

# image 관련 정보는 root의 자식으로 존재함
# 웹크롤링할 때 찾아들어가는 거랑 비슷함

# 루트 노드 중 filename이라는 노드를 찾아서 text를 가져옴
image_name = root.find('filename').text
# 파일 이미지 경로 설정
full_image_name = os.path.join(IMAGE_DIR, image_name)
# 루트 노드 중 size라는 노드를 찾음
image_size = root.find('size')
# size에서 너비를 가져옴
image_width = int(image_size.find('width').text)
# size에서 높이를 가져옴
image_height = int(image_size.find('height').text)

objects_list = []
# xml 파일 내에 있는 모든 object element를 찾아서 하나씩 꺼냄
for obj in root.findall('object'):
    # object element의 자식 element에서 bndbox를 찾음
    xmlbox = obj.find('bndbox')
    # bndbox element의 자식 element에서 xmin,ymin,xmax,ymax를 찾고 text를 추출 
    x1 = int(xmlbox.find('xmin').text)
    y1 = int(xmlbox.find('ymin').text)
    x2 = int(xmlbox.find('xmax').text)
    y2 = int(xmlbox.find('ymax').text)
    
    # 바운딩 박스의 좌표값(좌상단, 우하단)을 저장
    bndbox_pos = (x1, y1, x2, y2)
    # 해당 object element의 이름을 가져옴
    class_name = obj.find('name').text
    # 해당 object element의 이름을 key로, 바운딩 박스의 좌표값을 value로 해서 딕셔너리로 저장
    object_dict = { 'class_name' : class_name, 'bndbox_pos' : bndbox_pos}
    # 해당 object element의 이름과 좌표값 딕셔너리를 리스트에 저장
    objects_list.append(object_dict)

# 이미지 경로
print('full_image_name:', full_image_name,'\n', 'image_size:', (image_width, image_height))

# 이미지에 있는 오브젝트들
for object in objects_list:
    print(object)

"""# Annotation내의 Object들의 bounding box 정보를 이용하여 Bounding box 시각화"""

import cv2
import os
import xml.etree.ElementTree as ET

xml_file = os.path.join(ANNO_DIR, '2007_000032.xml')

tree = ET.parse(xml_file)
root = tree.getroot()

image_name = root.find('filename').text
full_image_name = os.path.join(IMAGE_DIR, image_name)

img = cv2.imread(full_image_name)
# opencv의 rectangle()는 인자로 들어온 이미지 배열에 그대로 사각형을 그리기 때문에 
# 별도의 이미지 배열에 그리기 위해 이미지 복제
draw_img = img.copy()
# opencv는 RGB가 아니라 BGR이므로 빨간색은 (0, 0, 255)
green_color = (0, 255, 0)
red_color = (0, 0, 255)

for obj in root.findall('object'):
    xmlbox = obj.find('bndbox')
    
    left = int(xmlbox.find('xmin').text)
    top = int(xmlbox.find('ymin').text)
    right = int(xmlbox.find('xmax').text)
    bottom = int(xmlbox.find('ymax').text)
    
    class_name=obj.find('name').text
    
    # draw_img 배열의 좌상단 우하단 좌표에 녹색으로 box 표시 
    cv2.rectangle(draw_img, (left, top), (right, bottom), color = green_color, thickness = 1)
    # draw_img 배열의 좌상단 좌표에 빨간색으로 클래스명 표시
    cv2.putText(draw_img, class_name, (left, top - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.4, red_color, thickness = 1)

# BGR -> RGB로 변경
img_rgb = cv2.cvtColor(draw_img, cv2.COLOR_BGR2RGB)
plt.figure(figsize = (10, 10))
plt.imshow(img_rgb)

