# -*- coding: utf-8 -*-
"""6. CNN 기초

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14m6xh6MCHo3r3I89rGU7qg826VMQuH4t

# CNN 개요

- 사람이 눈을 통해서 사물을 인지하는 절차를 그대로 적용하여 만든 인공신경망 혹은 네트워크 구조
- 합성곱 인공 신경망
  - Convolution Netual Network(CNN)
- History
  - 1989 : Lecun 논문에서 개념 발표
  - 2006 : CNN을 일반화한 논문 발표
  - 2012 : AletNet을 통해서 구현
    - 영상처리/분류/인식 분야의 가장 기본적인 성능을 제시
    - 이후는 이를 기반한 파생 네트워크들이 주류로 등장

# 네트워크 구조(신경망의 구조)

## ANN

```
입력층
은닉층(중간층)
출력층
```

## DNN (심층 인공 신경망)

```
입력층
은닉층(중간층)
...
은닉층(중간층)
출력층
```

## CNN(합성곱 인공 신경망)

- 은닉층을 사물인식 단계의 특성을 적용하여 설계
```
입력층
은닉층(중간층)
  L 합성곱층 -> 이미지 공간상의 특징 추출
  L 풀링층   -> 그렇게 나온 특징 강화하는 단계
  L 합성곱층
  L 풀링층
  L 합성곱층
  L 풀링층
  ...
  L 전결합층 -> 이 이미지는 무엇이다 분류하기위해 1차원으로  flattern 해준다 (수렴)
출력층 -> 최종 분류형태로 수렴
```

# 원리 및 특징

- 이미지 관점
  - 이미지 내에 공간 정보를 특징으로 추출하고 학습
  - 이미지 내의 인접 정보를 특징으로 추출하고 학습
  - 이것을 수행하기 위해서 해당 정보를 추출해야 하고 이를 위해서 특정 크기의 기준(잣대) 필요 => 커널 혹은 필터라고 부름(특정 크기를 가진) => 이 커널에는 W가 세팅되어 있음
- 예시
  - 커널 크기가 (3, 3)
  - 정사각형 커널
  - 이미지 공간상에서 왼쪽 상단부터 오른쪽으로 이동해가면서 정보를 추출(만약 이미지가 28, 28 이라면)

# 입력층

- 원본 이미지 데이터 입력
- 데이터를 설계된 shape에 맞게 크기를 조정
- 원본 크기가 제가각이면 전처리를 통해서 조정(opencv 등 활용)
- 데이터는 다음과 같은 shape을 가진것
  - ( **?**, x1, x2, x3,...)
  - 2D - Tensor 형태가 유력(2D 이미지)

# 은닉층

## 합성곱층(이미지상의 공간정보, 인접정보 등 특징을 추출)

### 개념
"""

from IPython.display import Image
Image('/content/drive/MyDrive/딥러닝/dl/cnn2.png')

# 합성곱층이 가중치(w)를 파라미터로 가진 필터(커널 K)를 스트라이드(s)하면서
# 이미지 원본을 슬라이딩하면서 특징을 뽑아서 모아두는데
# 이것을 Feature Map이라고 함

"""### 구성요소

- 입력(x) : 이전 층에서 나온 최종 산출물
  - 이전 층 : 최초 입력층, 이전 단계의 풀링층, 이전 단계의 과적합 방지층
- 커널(k)
  - 이미지 공간 / 인접 상의 특징을 추출할 때 그 경계 크기
  - 특징을 추출하기 위해서 값이 존재 -> 변경 -> 파라미터 -> 실체는 w
  - 행렬
  - 가중치를 파라미더로 가지는 커널(필터)
    - 수직 커널, 수평 커널, 가우시안 커널 등
    - 통계적인 함수를 대입
    - 랜덤값을 넣을 수도 이씅ㅁ
  - 편향(커널을 이용해서 이미지 원본 데이터에서 특징을 추출하고 나서 편향값을 적용할 수 있음)
- 스트라이드(s)
  - 커널이 이미지 원본 상에서 슬라이딩을 하며 이동할 때 그 크기를 지정하는 거
  - 이동량
  - 왼쪽에서 오른쪽으로, 위에서 아래로 이동함
- 패팅(p)
  - 커널이 스트라이드 값에 의해 슬라이딩하는 중에 경계선을 넘어설 수 있음
  - 이 경우 패딩을 적용해서 이미지 외괵을 통상 0으로 채워서 특징을 추출할 수 있게 보완
- 출력
  - feature map : 특징 정보를 가진 맵
  - activation map : feature map에 활성화 함수를 적용한 후 나온거
"""

Image('/content/drive/MyDrive/딥러닝/dl/cnn1.png')

# 커널(필터)이 이미지 원본상에서 특징을 추출하는 연산 과정

Image('/content/drive/MyDrive/딥러닝/dl/cnn3.png')

# 입력 데이터에 필터가 적용되어 특징이 뽑히는 과정

Image('/content/drive/MyDrive/딥러닝/dl/cnn4.png')

# 흑백, grayscale 이미지는 1 channel / 컬러 이미지는 3 channel
# channel이 많은 경우 각 channel별로 특징을 추출하고 이를 합산해서 최종 결과 산출함

Image('/content/drive/MyDrive/딥러닝/dl/cnn5.jpeg')

# 패딩 예시(옵션 : SAME 또는 VALID)
# SAME : 커널이 정보 추출 후 피쳐맵의 크키가 원본과 동일
# VALID : 커널이 정보 추출 후 피쳐맵의 크키가 원본보다 작아짐

Image('/content/drive/MyDrive/딥러닝/dl/cnn6.png')

# 일반적으로 0으로 채우고 1칸이 아닌 2칸 이상도 채울 수 있음

"""## 풀링층(특징을 강화)

- 역할
  - 풀링층으로 들어오는 입력 데이터의 특징 강화(피쳐맵, 활성화맵)
  - 기법
    - 최대 풀링
    - 평균 풀링
  - w가 필요 없음
"""

Image('/content/drive/MyDrive/딥러닝/dl/cnn7.jpeg', width = 500)

# 풀링은 설계에 따라 이미지 원본 크기가 줄어들 수 있음
# s, p 값에 따라 크기가 달라짐

Image('/content/drive/MyDrive/딥러닝/dl/cnn8.jpeg', width = 700)



"""## 전결합층

- 결과에 수렴하기 위한 중간 단계, 완충 단계
- flattern 처리를 하고 1차원 벡터로 펴주는 단계(선형으로 수렴하는 단계)
- 최종 결과 출력츨에 연결됨
"""

Image('/content/drive/MyDrive/딥러닝/dl/cnn9.png')

# 전결합층의 이전 단계까지는 특징 추출 단계(feature extraction)
# 이후는 분류 단계(classification)

"""# 출력층

- 예시
  - 입력 데이터 x는 3이다 -> 분류(인식)
  - 1일 확률 5%, 2일 확률 3%, 3일 확률 92%
  - 가장 높은 확률인 3에 의해 이 이미지는 3이라고 예측
"""