# -*- coding: utf-8 -*-
"""19.전이학습_사전학습된모델사용_가중치_편향모두초기화.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X5jzyNg5y6hL69T5r-3T34fkzQDEBPn0

# 개요

- 성과가 잘 나온 모델을 가져온다
- 사전 학습된 W,b는 모두 초기화 한다
  - 모델이 학습한 데이터와, 내 데이터가 다르므로 초기화했다
- 현재 남은것은 네트워크만 있을것이다
- 새로운 데이터를 넣고, 가중치도 초기화값 세팅 학습 진행
- 신경망 구조만 사용하고, 가중치는 내가 직접 훈련해서 세팅하겟다
- 예측
  - **정확도가 떨어질듯 하고, 많은 훈련시간이 필요할듯 하다**

# 데이터 준비

- 케글에서 제공되는 데이터 활용



```
# 패키지 설치
!pip install kaggle

# 환경변수
import os

os.envrion['KAGGLE_USERNAME'] = '이름'
os.envrion['KAGGLE_KEY'] = '인증키'

# 다운로드
!kaggle competitions download -c 경쟁부분이름
```
"""

import tensorflow as tf
tf.__version__

"""# 데이터 확인 및 **준비**

## 정답 데이터
"""

import os

fDir = '/content/drive/MyDrive/k-디지털-품질재단/딥러닝/dog_cat_data/Images'

labels = list()
for dir in os.listdir(fDir):
  dog_type = '-'.join(dir.split('-')[1:])
  for f in os.listdir( os.path.join( fDir, dir) ):
    name = f.split('.')[0]
    data = f'{dir},{name},{dog_type}\n'
    labels.append( data )

with open('new_labels.csv', 'w') as f:
  f.write( 'dir,name,spec\n'+ ''.join(labels) )

import pandas as pd
labels = pd.read_csv('/content/new_labels.csv')
labels.shape

labels.head(1)

# 종의 총수
len( labels.spec.unique() )

"""## 훈련데이터 확인"""

import cv2
# 이미지 리사이징 처리에 활용
# 이미지 원재료 그대로 리사이징 하면 이미지가 깨진다
# 특정 부위만 필요로 한다면, 
# 바운딩박스를 표시 -> 해당 부분만 컷 -> 리사이징

"""- 데이터가 부족할때 사용(이미지)
- 이미지 데이터
  - 이미지 부풀리기
    - 자르기, 회전하기, 뒤틀리기, 반전, 왜곡,.... => 생각보다 정확도가 높아지진 않는다
  - GAN을 통해서 생성하기
"""

base_path = '/content/drive/MyDrive/k-디지털-품질재단/딥러닝/dog_cat_data/Images'
train_X   = list()
for i in range(100):
  dir   = labels.loc[i, 'dir']
  name  = labels.loc[i, 'name']
  fName = f'{base_path}/{dir}/{name}.jpg'
  img   = cv2.imread( fName )
  img   = cv2.resize( img, dsize=(224,224) )
  img   = img / 255.0
  train_X.append( img )

import numpy as np
train_X = np.array( train_X )
train_X.shape

unique_label = labels.spec.unique().tolist()
train_y      = [ unique_label.index(name) for name in labels.spec ]
train_y      = np.array( train_y )
train_y.shape

"""# 전이학습 진행

## 사전학습된 모델 획득
"""

from tensorflow.keras.applications import MobileNetV2
mobilev2 = MobileNetV2()

"""## 가중치 초기화

- 사전 학습된 모델의 가중치를 모두 초기화하여 새로 학습, 네트워크만 빌려 사용
"""

# 전체 layers 수
len( mobilev2.layers ) 
# 156 layer 사용

from tensorflow.python.ops.variables import model_variables
# 이 모델은 출력층에서 분류하는 값이 1000개 중에 하나를 분류
# 이 프로젝트는 120개 중에 하나를 분류하는 미션
# 훈련 가능한 형태로 layer를 조정 => 1000개로 출려되는 부분  제거
for layer in mobilev2.layers[:-1]:
  # 해당층이 훈련 가능한가?  
  layer.trainable = True
# 마지막층을 제외하고 모든층은 다시 훈련할수 있게 조정

import numpy as np
# 가중치, 커널 초기화
for layer in mobilev2.layers[:-1]:
  # 레이어를 구성하는 성분들 중에 
  if 'kernel' in layer.__dict__: # 커널이 있다면 => 합성곱층이면
    # 현재 커널의 shape 획득
    kernel = np.array( layer.get_weights() ).shape
    # 평균이 0, 표준편차가 1인 정규분포를 가진 난수값을 W로 가진
    # 커널을 생성해서 새로 세팅한다 => 초기화 했다
    layer.set_weights( tf.random.normal( kernel, 0, 1 ) )

"""## 모델에 적용하여 전이학습-실제학습 진행

- 전이 학습용 모델 + 새로운 구조를 추가(후반부 작업)
  - 기존 모델은 156층
  - 마지막 2개층 flattern->y에 수렴하는 구조
  - 후반 수렴지점을 교체해서 처리
"""

# 교체 지점 획득
x        = mobilev2.layers[-2].output
# 기존모델 flattern 단계에서 마지막에 120개 백터를 가진 층으로 수렴
# 출력층 교체
preModel = tf.keras.layers.Dense( 120, activation='softmax' )( x )
# 모델획득(입력와 출력을 새로세팅)
model    = tf.keras.Model( inputs=mobilev2.input, outputs=preModel )

# 컴파일(실행)
model.compile( optimizer='sgd', loss='sparse_categorical_crossentropy', 
               metrics=['accuracy'])
#model.summary()

# 학습
hist = model.fit( train_X, train_y[:100], epochs=10, 
                  validation_split=0.25, batch_size=32 )